library(drop1)
install.packages("drop1")
# STA 120 Exercises 03
rm(list = ls())
cat("\014")
# Task 1
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution.png')
set.seed(3)
lambda1 <- 0.2
lambda2 <- 2
n <- 200
data1 <- dpois(1:n,lambda1)
data2 <- dpois(1:n,lambda2)
# Pay attention to the binning to be used for count data!
par(mfrow = c(1, 2))
hist( data1 , xlab = "", prob = TRUE,
breaks = seq(min(data1)-0.5, max(data1)+0.5, by = 1),
main = expression(lambda == 0.2))
dev.off()
# Use the points function to overlay the theoretical values of the PMF
points(unique(1:n), dpois(unique(1:n), lambda1), pch = 19)
# Task 1
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution.png')
set.seed(3)
lambda1 <- 0.2
lambda2 <- 2
n <- 200
data1 <- dpois(1:n,lambda1)
data2 <- dpois(1:n,lambda2)
# Pay attention to the binning to be used for count data!
par(mfrow = c(1, 2))
hist( data1 , xlab = "", prob = TRUE,
breaks = seq(min(data1)-0.5, max(data1)+0.5, by = 1),
main = expression(lambda == 0.2))
# Use the points function to overlay the theoretical values of the PMF
points(unique(1:n), dpois(unique(1:n), lambda1), pch = 19)
hist( data2 , xlab = "", prob = TRUE,
breaks = seq(min(data2)-0.5, max(data2)+0.5, by = 1),
main = expression(lambda == 2))
points(unique(1:n), dpois(unique(1:n), lambda2), pch = 19)
dev.off()
# Task 1
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution.png')
set.seed(3)
lambda1 <- 0.2
lambda2 <- 2
n <- 200
data1 <- dpois(n,lambda1)
data2 <- dpois(n,lambda2)
# Pay attention to the binning to be used for count data!
par(mfrow = c(1, 2))
hist( data1 , xlab = "", prob = TRUE,
breaks = seq(min(data1)-0.5, max(data1)+0.5, by = 1),
main = expression(lambda == 0.2))
# Use the points function to overlay the theoretical values of the PMF
points(unique(1:n), dpois(unique(1:n), lambda1), pch = 19)
hist( data2 , xlab = "", prob = TRUE,
breaks = seq(min(data2)-0.5, max(data2)+0.5, by = 1),
main = expression(lambda == 2))
points(unique(1:n), dpois(unique(1:n), lambda2), pch = 19)
dev.off()
# STA 120 Exercises 03
rm(list = ls())
cat("\014")
# Task 1
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution.png')
set.seed(3)
lambda1 <- 0.2
lambda2 <- 2
n <- 200
data1 <- rpois(n, lambda1)
data2 <- rpois(n, lambda2)
par(mfrow = c(1, 2))
hist(data1, xlab = "", prob = TRUE,
breaks = seq(min(data1) - 0.5, max(data1) + 0.5, by = 1),
main = expression(lambda == 0.2))
# Overlay theoretical PMF values for lambda = 0.2
points(unique(data1),
dpois(unique(data1), lambda1),
pch = 19)
hist(data2, xlab = "", prob = TRUE,
breaks = seq(min(data2) - 0.5, max(data2) + 0.5, by = 1),
main = expression(lambda == 2))
# Overlay theoretical PMF values for lambda = 2
points(unique(data2),
dpois(unique(data2), lambda2),
pch = 19)
dev.off()
# Task 2
# Print results
# Task 2
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution2.png')
lambda <- 5
grid <- 0:12
n <- c(10, 100, 1000)
par(mfrow = c(1, 3))
for (i in 1:length(n)) {
# Compute pmfs
pois <- dpois(grid, lambda)
binom <- dbinom(grid, n[i], lambda/n[i])
# Plot Poisson distribution
plot(grid, pois, main = paste("n =", n[i]), type = "h",
ylim = c(0, 0.25), xlab = "", ylab = "", col = 1)
points(grid, pois, col = 1, pch = 20)
# Plot Binomial distribution (shifted 0.1 to the right)
points(grid + 0.1, binom, type = "h", col = 2)
points(grid + 0.1, binom, col = 2, pch = 20)
legend("topright", pch = 20, legend = c("Pois", "Binom"), col = c(1, 2))
}
dev.off()
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution5.png')
lambda1 <- 0.2
lambda2 <- 2
grid <- 0:8  # the distribution should be plotted from 0 to 8 (x-axis)
par(mfrow = c(1, 2))
# Plot the PMFs
plot(grid, dpois(grid, lambda1), main = "PMFs", type = "h",
xlab = expression(x), ylab = expression(f(x)), col = "blue")
points(grid, dpois(grid, lambda1), col = "blue", pch = 20)
# Plot the second PMF shifted 0.1 to the right for visibility
points(grid + 0.1, dpois(grid, lambda2), type = "h", col = "red")
points(grid + 0.1, dpois(grid, lambda2), col = "red", pch = 20)
legend("topright", pch = 20,
legend = c(expression(lambda == 0.2), expression(lambda == 2)),
col = c("blue", "red"))
# Compute CDF values, including an extra initial point (0) for the step function
probs1 <- c(0, ppois(grid, lambda1))
probs2 <- c(0, ppois(grid, lambda2))
# Plot the CDFs using step functions
plot(stepfun(c(-1, grid), probs1), verticals = TRUE, pch = 20,
xlab = expression(x), ylab = expression(F(x)),
main = "CDFs", col = "blue")
# STA 120 Exercises 03
rm(list = ls())
cat("\014")
# Task 1
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution1.png')
set.seed(3)
lambda1 <- 0.2
lambda2 <- 2
n <- 200
data1 <- rpois(n, lambda1)
data2 <- rpois(n, lambda2)
par(mfrow = c(1, 2))
hist(data1, xlab = "", prob = TRUE,
breaks = seq(min(data1) - 0.5, max(data1) + 0.5, by = 1),
main = expression(lambda == 0.2))
# Overlay theoretical PMF values for lambda = 0.2
points(unique(data1),
dpois(unique(data1), lambda1),
pch = 19)
hist(data2, xlab = "", prob = TRUE,
breaks = seq(min(data2) - 0.5, max(data2) + 0.5, by = 1),
main = expression(lambda == 2))
# Overlay theoretical PMF values for lambda = 2
points(unique(data2),
dpois(unique(data2), lambda2),
pch = 19)
dev.off()
# Task 2
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution2.png')
lambda <- 5
grid <- 0:12
n <- c(10, 100, 1000)
par(mfrow = c(1, 3))
for (i in 1:length(n)) {
# Compute pmfs
pois <- dpois(grid, lambda)
binom <- dbinom(grid, n[i], lambda/n[i])
# Plot Poisson distribution
plot(grid, pois, main = paste("n =", n[i]), type = "h",
ylim = c(0, 0.25), xlab = "", ylab = "", col = 1)
points(grid, pois, col = 1, pch = 20)
# Plot Binomial distribution (shifted 0.1 to the right)
points(grid + 0.1, binom, type = "h", col = 2)
points(grid + 0.1, binom, col = 2, pch = 20)
legend("topright", pch = 20, legend = c("Pois", "Binom"), col = c(1, 2))
}
dev.off()
# Task 3
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution3.png')
set.seed(12)
n <- 100
# Sample the data from Exp(rate = 2)
data <- rexp(n, rate = 2)
# Plot histogram of the sampled data (using probability = TRUE for density)
hist(data, probability = TRUE, main = "", xlab = "x", ylab = "Density")
# Superimpose the theoretical density curve for Exp(rate = 2)
curve(dexp(x, rate = 2), add = TRUE, col = "red", lwd = 2)
dev.off()
# Task 4
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution4.png')
set.seed(100)
n <- 100
# Generate a matrix with dimensions 500 x n, where each entry is drawn from an exponential distribution with rate 2
artificial <- matrix(rexp(500 * n, rate = 2), 500, n)
# Compute the minimum of each row (i.e. each sample)
rowmins <- apply(artificial, 1, min)
par(mfrow = c(1, 2))
hist(rowmins, prob = TRUE, xlab = "Sample minima", ylim = c(0, n * 2),
main = "", breaks = 30)
rug(rowmins)
# Overlay the theoretical density of Exp(2*n), since the minimum of n i.i.d. Exp(2) is Exp(2*n)
curve(dexp(x, rate = 2 * n), col = "red", add = TRUE)
# Create a QQ-plot comparing the sample minima with the theoretical quantiles from Exp(2*n)
qqplot(qexp(ppoints(500), rate = 2 * n), rowmins, xlab = "Exp(2n)")
qqline(rowmins, distribution = function(p){qexp(p, rate = 2 * n)})
dev.off()
# Task 5
png(file='/Volumes/methlab/Students/Arne/PhD Courses/Courses UZH/25FS_STA120_IntroToStatistics/exercises/sta120_exercises03_solution5.png')
lambda1 <- 0.2
lambda2 <- 2
grid <- 0:8  # the distribution should be plotted from 0 to 8 (x-axis)
par(mfrow = c(1, 2))
# Plot the PMFs
plot(grid, dpois(grid, lambda1), main = "PMFs", type = "h",
xlab = expression(x), ylab = expression(f(x)), col = "blue")
points(grid, dpois(grid, lambda1), col = "blue", pch = 20)
# Plot the second PMF shifted 0.1 to the right for visibility
points(grid + 0.1, dpois(grid, lambda2), type = "h", col = "red")
points(grid + 0.1, dpois(grid, lambda2), col = "red", pch = 20)
legend("topright", pch = 20,
legend = c(expression(lambda == 0.2), expression(lambda == 2)),
col = c("blue", "red"))
# Plot the CDFs using step functions
plot(stepfun(grid, c(0, ppois(grid, lambda1))), verticals = TRUE, pch = 20,
xlab = expression(x), ylab = expression(F(x)),
main = "CDFs", col = "blue", xlim = c(-1, 9))
plot(stepfun(grid, c(0, ppois(grid, lambda2))), verticals = TRUE, add = TRUE, pch = 20, col = "red")
legend("bottomright", pch = 20,
legend = c(expression(lambda == 0.2), expression(lambda == 2)),
col = c("blue", "red"))
dev.off()
#install.packages('lme4')
#install.packages('nlme')
#install.packages('emmeans')
#install.packages("ggplot2")
#install.packages("pbkrtest")
#install.packages("lmerTest")
#install.packages("sjPlot")
#install.packages("writexl")
#install.packages("drop1")
#install.packages("car")
library(lme4)
library(nlme)
library(emmeans)
library(ggplot2)
library(pbkrtest)
library(lmerTest)
library(sjPlot)
library("writexl")
library("lm.beta")
#library(drop1)
library(car)
# Set WD
setwd('/Users/Arne/Documents/GitHub/AOC/4_stats')
# no scientific notation, exact p-values
options(scipen=999) # default = 0
options(scipen=0)
# load data
dat = read.csv('/Volumes/methlab/Students/Arne/AOC/data/features/merged_data_nback.csv')
dat <- na.omit(dat)
# make sure, the vars are factors
dat$ID = as.factor(dat$ID)
dat$Condition = as.factor(dat$Condition)
# Model for Accuracy
glmm_accuracy <- lmer(dat$Accuracy ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_accuracy)
# Anova
Anova(glmm_accuracy, type = "II")
# Model for Reaction Time
glmm_rt <- lmer(dat$ReactionTime ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_rt)
# Anova
Anova(glmm_rt, type = "II")
# Model
glmm_gaze <- lmer(dat$GazeDeviation ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_gaze)
# Model
glmm_alpha <- lmer(dat$AlphaPower ~ dat$GazeDeviation * dat$Condition + (1|dat$ID), data = dat)
summary(glmm_alpha)
#install.packages('lme4')
#install.packages('nlme')
#install.packages('emmeans')
#install.packages("ggplot2")
#install.packages("pbkrtest")
#install.packages("lmerTest")
#install.packages("sjPlot")
#install.packages("writexl")
#install.packages("drop1")
#install.packages("car")
library(lme4)
library(nlme)
library(emmeans)
library(ggplot2)
library(pbkrtest)
library(lmerTest)
library(sjPlot)
library("writexl")
library("lm.beta")
#library(drop1)
library(car)
# Set WD
setwd('/Users/Arne/Documents/GitHub/AOC/4_stats')
# no scientific notation, exact p-values
options(scipen=999) # default = 0
options(scipen=0)
# load data
dat = read.csv('/Volumes/methlab/Students/Arne/AOC/data/features/merged_data_sternberg.csv')
dat = na.omit(dat)
# make sure, the vars are factors
dat$ID = as.factor(dat$ID)
dat$Condition = as.factor(dat$Condition)
# Model for Accuracy
glmm_accuracy <- lmer(dat$Accuracy ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_accuracy)
# Model for Reaction Time
glmm_rt <- lmer(dat$ReactionTime ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_rt)
# Model
glmm_gaze <- lmer(dat$GazeDeviation ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_gaze)
# Model
glmm_ONLYalpha <- lmer(dat$AlphaPower ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_alpha)
# Model
glmm_ONLYalpha <- lmer(dat$AlphaPower ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_ONLYalpha)
# Model
glmm_alpha <- lmer(dat$AlphaPower ~ dat$GazeDeviation * dat$Condition + (1|dat$ID), data = dat)
summary(glmm_alpha)
#install.packages('lme4')
#install.packages('nlme')
#install.packages('emmeans')
#install.packages("ggplot2")
#install.packages("pbkrtest")
#install.packages("lmerTest")
#install.packages("sjPlot")
#install.packages("writexl")
#install.packages("drop1")
#install.packages("car")
library(lme4)
library(nlme)
library(emmeans)
library(ggplot2)
library(pbkrtest)
library(lmerTest)
library(sjPlot)
library("writexl")
library("lm.beta")
#library(drop1)
library(car)
# Set WD
setwd('/Users/Arne/Documents/GitHub/AOC/4_stats')
# no scientific notation, exact p-values
options(scipen=999) # default = 0
options(scipen=0)
# printing smaller p-values than e-16
# https://stackoverflow.com/questions/6970705/why-cant-i-get-a-p-value-smaller-than-2-2e-16
# load data
dat = read.csv('/Volumes/methlab/Students/Arne/AOC/data/features/merged_data_nback.csv')
dat <- na.omit(dat)
# make sure, the vars are factors
dat$ID = as.factor(dat$ID)
dat$Condition = as.factor(dat$Condition)
######################
##### Behavioral #####
######################
# Model for Accuracy
glmm_accuracy <- lmer(dat$Accuracy ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_accuracy)
# Anova
Anova(glmm_accuracy, type = "II")
# Model for Reaction Time
glmm_rt <- lmer(dat$ReactionTime ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_rt)
# Anova
Anova(glmm_rt, type = "II")
# Extract coefficients
coeff_accuracy <- summary(glmm_accuracy)[["coefficients"]]
coeff_accuracy
coeff_rt <- summary(glmm_rt)[["coefficients"]]
coeff_rt
# Display models
######################
######## Gaze ########
######################
# Model
glmm_ONLYgaze <- lmer(dat$Condition + (1|dat$ID), data = dat)
# Model
glmm_ONLYgaze <- lmer(dat$Condition + (1|dat$ID), data = dat)
summary(glmm_ONLYgaze)
#install.packages('lme4')
#install.packages('nlme')
#install.packages('emmeans')
#install.packages("ggplot2")
#install.packages("pbkrtest")
#install.packages("lmerTest")
#install.packages("sjPlot")
#install.packages("writexl")
#install.packages("drop1")
#install.packages("car")
library(lme4)
library(nlme)
library(emmeans)
library(ggplot2)
library(pbkrtest)
library(lmerTest)
library(sjPlot)
library("writexl")
library("lm.beta")
#library(drop1)
library(car)
# Set WD
setwd('/Users/Arne/Documents/GitHub/AOC/4_stats')
# no scientific notation, exact p-values
options(scipen=999) # default = 0
options(scipen=0)
# load data
dat = read.csv('/Volumes/methlab/Students/Arne/AOC/data/features/merged_data_nback.csv')
dat <- na.omit(dat)
# make sure, the vars are factors
dat$ID = as.factor(dat$ID)
dat$Condition = as.factor(dat$Condition)
# Model for Accuracy
glmm_accuracy <- lmer(dat$Accuracy ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_accuracy)
# Anova
Anova(glmm_accuracy, type = "II")
# Model for Reaction Time
glmm_rt <- lmer(dat$ReactionTime ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_rt)
# Anova
Anova(glmm_rt, type = "II")
# Extract coefficients
coeff_accuracy <- summary(glmm_accuracy)[["coefficients"]]
coeff_accuracy
coeff_rt <- summary(glmm_rt)[["coefficients"]]
coeff_rt
# Model
glmm_ONLYgaze <- lmer(dat$Condition + (1|dat$ID), data = dat)
#install.packages('lme4')
#install.packages('nlme')
#install.packages('emmeans')
#install.packages("ggplot2")
#install.packages("pbkrtest")
#install.packages("lmerTest")
#install.packages("sjPlot")
#install.packages("writexl")
#install.packages("drop1")
#install.packages("car")
library(lme4)
library(nlme)
library(emmeans)
library(ggplot2)
library(pbkrtest)
library(lmerTest)
library(sjPlot)
library("writexl")
library("lm.beta")
#library(drop1)
library(car)
# Set WD
setwd('/Users/Arne/Documents/GitHub/AOC/4_stats')
# no scientific notation, exact p-values
options(scipen=999) # default = 0
options(scipen=0)
# printing smaller p-values than e-16
# https://stackoverflow.com/questions/6970705/why-cant-i-get-a-p-value-smaller-than-2-2e-16
# load data
dat = read.csv('/Volumes/methlab/Students/Arne/AOC/data/features/merged_data_nback.csv')
dat <- na.omit(dat)
# make sure, the vars are factors
dat$ID = as.factor(dat$ID)
dat$Condition = as.factor(dat$Condition)
######################
##### Behavioral #####
######################
# Model for Accuracy
glmm_accuracy <- lmer(dat$Accuracy ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_accuracy)
# Anova
Anova(glmm_accuracy, type = "II")
# Model for Reaction Time
glmm_rt <- lmer(dat$ReactionTime ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_rt)
# Anova
Anova(glmm_rt, type = "II")
# Extract coefficients
coeff_accuracy <- summary(glmm_accuracy)[["coefficients"]]
coeff_accuracy
coeff_rt <- summary(glmm_rt)[["coefficients"]]
coeff_rt
# Display models
######################
######## Gaze ########
######################
# Model
glmm_gaze <- lmer(dat$GazeDeviation ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_gaze)
# Anova
Anova(glmm_gaze, type = "II")
# Extract coefficients
coeff_gaze <- summary(glmm_gaze)[["coefficients"]]
coeff_gaze
# Display models
######################
####### Alpha ########
######################
# Model
glmm_ONLYalpha <- lmer(dat$AlphaPower ~ dat$Condition + (1|dat$ID), data = dat)
summary(glmm_ONLYalpha)
